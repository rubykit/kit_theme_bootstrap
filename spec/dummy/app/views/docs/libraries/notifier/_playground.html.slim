// Source: https://codeseven.github.io/notifier/demo.html

.container

  .row

    .col-8
      .fw-700.mb-2 Classes

      ruby:
        list = {
          containerId:       'notifications-container',
          containerClass:    '',
          notificationClass: ['notification notification-info', true],
          contentClass:      'notification-content',
          closeHtml:         '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>',
          closeClass:        'notification-dismissible',
          progressClass:     'notification-progress',
        }

      - list.each do |k, v|
        .row.mt-1
          label.col-form-label.col-sm-4.fs-80p.ff-ms for=k
            = k
          .col-sm-8
            input.form-control.form-control-sm id=k placeholder=(v.is_a?(Array) ? v[0] : v) type="text" value=(v.is_a?(Array) ? v[1] : nil)

    .col-4#containerPositionClass
      .fw-700.mb-2 Container position class

      .fs-70p.ff-ms.pb-2.fs-italic
        | This will be added to <b>containerClass</b>

      ruby:
        positions = [
          'notifications-top-left',
          'notifications-top-center',
          'notifications-top-right',

          'notifications-bottom-right',
          'notifications-bottom-center',
          'notifications-bottom-left',
        ]
      - positions.each_with_index do |class_name, idx|
        .form-check
          input.form-check-input id=class_name name="positions" type="radio" value=class_name checked=(idx == 0)
          label.form-check-label.ff-ms.fs-70p for=class_name
            | .#{ class_name }

  .row.mt-2

    .col-12
      label.form-label.mb-0.fw-700.py-2 for="content"
        | Content
      textarea#content.form-control.form-control-sm placeholder="Content (can be html)" rows="3"

  .row.mt-4

    .col-4
      .fw-700.mb-2 More Options

      .form-check
        input#newestOnTop.form-check-input type="checkbox" checked="checked"
        label.form-check-label for="newestOnTop"
          | Newest on top
      .form-check
        input#preventDuplicates.form-check-input type="checkbox" checked="checked"
        label.form-check-label for="preventDuplicates"
          | Prevent Duplicates

      .mt-3

      .form-check
        input#closeButton.form-check-input type="checkbox" checked="checked"
        label.form-check-label for="closeButton"
          | Close button

      .form-check
        input#closeOnClick.form-check-input type="checkbox"
        label.form-check-label for="closeOnClick"
          | Close on click / tap

      .mt-3

      .form-check
        input#debugInfo.form-check-input type="checkbox" value="checked"
        label.form-check-label for="debugInfo"
          | Debug

      .mt-2

      .form-check
        input#addBehaviorOnClick.form-check-input type="checkbox" value="checked"
        label.form-check-label for="addBehaviorOnClick"
          | Add behavior on click

    .col-4
      .fw-700.mb-2 Timeout options

      .fs-70p.ff-ms.pb-2.fs-italic
        | Set timeOut and afterHoverTimeOut to 0 to make it sticky

      .row.mb-2
        label.col-form-label.col-sm-6.py-1.fs-90p for="timeOut"
          | Time out
        .col-sm-6
          input#timeOut.form-control.form-control-sm placeholder="ms" type="text" value="20000"

      .form-check
        input#progressBar.form-check-input type="checkbox" checked="checked"
        label.form-check-label for="progressBar"
          | Timeout progress bar

      .row.my-2
        label.col-form-label.col-sm-6.py-1.fs-90p for="afterHoverTimeOut"
          | New timeout on hover
        .col-sm-6
          input#afterHoverTimeOut.form-control.form-control-sm placeholder="ms" type="text" value="0"

      .form-check
        input#pauseTimerOnHover.form-check-input type="checkbox"
        label.form-check-label for="pauseTimerOnHover"
          | Pause timeout on hover

      .fs-70p.ff-ms.pb-2.fs-italic
        | Pause timeout on hover only works if new timeout on hover is set to zero.

    .col-4
      .fw-700.mb-2 Effects options

      .row.mb-2
        label.col-form-label.col-sm-6.py-1.fs-90p for="showMethod"
          | Show method
        .col-sm-6
          input#showMethod.form-control.form-control-sm placeholder="show, fadeIn, slideDown" type="text" value="fadeIn"
      .row.mb-2
        label.col-form-label.col-sm-6.py-1.fs-90p for="showEasing"
          | Show easing
        .col-sm-6
          input#showEasing.form-control.form-control-sm placeholder="swing, linear" type="text" value="swing"
      .row.mb-2
        label.col-form-label.col-sm-6.py-1.fs-90p for="showDuration"
          | Show duration
        .col-sm-6
          input#showDuration.form-control.form-control-sm placeholder="ms" type="text" value="300"

      .row.mb-2.mt-3
        label.col-form-label.col-sm-6.py-1.fs-90p for="hideMethod"
          | Hide method
        .col-sm-6
          input#hideMethod.form-control.form-control-sm placeholder="hide, fadeOut, slideUp" type="text" value="fadeOut"
      .row.mb-2
        label.col-form-label.col-sm-6.py-1.fs-90p for="hideEasing"
          | Hide easing
        .col-sm-6
          input#hideEasing.form-control.form-control-sm placeholder="swing, linear" type="text" value="swing"
      .row.mb-2
        label.col-form-label.col-sm-6.py-1.fs-90p for="hideDuration"
          | Hide duration
        .col-sm-6
          input#hideDuration.form-control.form-control-sm placeholder="ms" type="text" value="300"

  .row.mt-4
    .col-4.text-start
      button#showNotification.btn.btn-success type="button"
        | Trigger

    .col-8.text-end
      button#clearAllNotifications.btn.btn-danger.me-2 type="button"
        | Clear all
      button#clearLastNotification.btn.btn-danger type="button"
        | Clear last

  .row.mt-3
    .col-12
      pre#notifierOptions


javascript:
  $(function() {
    var i = -1;
    var notificationsCount = 0;
    var $lastNotification;

    var getContent = function() {
      var msgs = [
        'My name is Inigo Montoya. You killed my father. Prepare to die!',
        '<div><input class="form-control form-control-sm" value="textbox"/></div><div class="pt-2"><a href="https://google.com" target="_blank">This is a hyperlink</a></div><div class="text-end"><button type="button" id="surpriseBtn" class="btn btn-info" style="margin: 0 8px 0 8px">Some other action</button><button type="button" id="okBtn" class="btn btn-warning">Close me</button></div>',
        'Inconceivable!',
        'I do not think that means what you think it means.',
      ];
      i++;
      if (i === msgs.length) {
        i = 0;
      }

      return msgs[i];
    };

    $('#showNotification').click(function() {
      var content           = $('#content').val();
      var notificationIndex = notificationsCount++;

      var optionsOverride   = {};
      notifier.options      = {
        containerClass: $('#containerClass').val() + ' ' + ($('#containerPositionClass input:radio:checked').val() || 'notifications-top-right'),
        onclick:        null,
      };

      let listChecxboxVal = [
        'closeButton',
        'pauseTimerOnHover',
        'closeOnClick',
        'debug',
        'newestOnTop',
        'progressBar',
        'preventDuplicates',
      ];

      for (const key of listChecxboxVal) {
        notifier.options[key] = $(`#${ key }`).prop('checked');
      }

      let listInputVal = [
        'timeOut',
        'afterHoverTimeOut',

        'showMethod',
        'showEasing',
        'showDuration',

        'hideMethod',
        'hideDuration',
        'hideEasing',

        'containerId',
        'notificationClass',
        'contentClass',
        'closeHtml',
        'closeClass',
        'progressClass',
      ];

      for (const key of listInputVal) {
        let $el = $(`#${ key }`);
        let val = $el.val()
        if (val.length) {
          notifier.options[key] = val;
        }
      }

      if ($('#addBehaviorOnClick').prop('checked')) {
        notifier.options.onclick = function() {
          alert('You can perform some custom action after a notification goes away');
        };
      }

      if (!content) {
        content = getContent();
      }

      optionsOverride.content = content;

      $('#notifierOptions').text(
        'Command: notifier.notify('+ JSON.stringify(optionsOverride, null, 2) + ')' +
        '\n\n' +
        'notifier.options = ' + JSON.stringify(notifier.options, null, 2)
      );

      var $notification = notifier.notify(optionsOverride); // Wire up an event handler to a button in the notification, if it exists
      $lastNotification = $notification;

      if (typeof $notification === 'undefined') {
        return;
      }

      if ($notification.find('#okBtn').length) {
        $notification.delegate('#okBtn', 'click', function() {
          alert('You clicked me. I was notification #' + notificationIndex + ', goodbye!');
          $notification.remove();
        });
      }
      if ($notification.find('#surpriseBtn').length) {
        $notification.delegate('#surpriseBtn', 'click', function() {
          alert('Surprise! you clicked me. I was notification #' + notificationIndex + '. You could perform an action here.');
        });
      }
      if ($notification.find('.clear').length) {
        $notification.delegate('.clear', 'click', function() {
          notifier.clear($notification, {
            force: true
          });
        });
      }
    });

    function getLastNotification() {
      return $lastNotification;
    }
    $('#clearLastNotification').click(function() {
      notifier.clear(getLastNotification());
    });
    $('#clearAllNotifications').click(function() {
      notifier.clear();
    });
  })